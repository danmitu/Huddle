//
//  DrawCode.swift
//  Huddle
//
//  Created by Dan Mitu on 1/21/19.
//  Copyright Â© 2019 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class DrawCode : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawUserTabIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit, isSelected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let appleBlue = UIColor(red: 0.000, green: 0.478, blue: 0.980, alpha: 1.000)
        let appleGray = UIColor(red: 0.624, green: 0.624, blue: 0.624, alpha: 1.000)

        //// Variable Declarations
        let tabbarButtonColor = isSelected ? appleBlue : appleGray

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 20, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 25.71, y: 14), controlPoint1: CGPoint(x: 23.16, y: 20), controlPoint2: CGPoint(x: 25.71, y: 17.31))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 8), controlPoint1: CGPoint(x: 25.71, y: 10.69), controlPoint2: CGPoint(x: 23.16, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 14.29, y: 14), controlPoint1: CGPoint(x: 16.84, y: 8), controlPoint2: CGPoint(x: 14.29, y: 10.69))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 20), controlPoint1: CGPoint(x: 14.29, y: 17.31), controlPoint2: CGPoint(x: 16.84, y: 20))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 24, y: 21.5))
        bezierPath.addLine(to: CGPoint(x: 23.25, y: 21.5))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 22.25), controlPoint1: CGPoint(x: 22.26, y: 21.98), controlPoint2: CGPoint(x: 21.16, y: 22.25))
        bezierPath.addCurve(to: CGPoint(x: 16.75, y: 21.5), controlPoint1: CGPoint(x: 18.84, y: 22.25), controlPoint2: CGPoint(x: 17.74, y: 21.98))
        bezierPath.addLine(to: CGPoint(x: 16, y: 21.5))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 27.8), controlPoint1: CGPoint(x: 12.69, y: 21.5), controlPoint2: CGPoint(x: 10, y: 24.32))
        bezierPath.addLine(to: CGPoint(x: 10, y: 29.75))
        bezierPath.addCurve(to: CGPoint(x: 12.14, y: 32), controlPoint1: CGPoint(x: 10, y: 30.99), controlPoint2: CGPoint(x: 10.96, y: 32))
        bezierPath.addLine(to: CGPoint(x: 27.86, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 29.75), controlPoint1: CGPoint(x: 29.04, y: 32), controlPoint2: CGPoint(x: 30, y: 30.99))
        bezierPath.addLine(to: CGPoint(x: 30, y: 27.8))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 21.5), controlPoint1: CGPoint(x: 30, y: 24.32), controlPoint2: CGPoint(x: 27.31, y: 21.5))
        bezierPath.close()
        tabbarButtonColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCalendarTabIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit, isSelected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let appleBlue = UIColor(red: 0.000, green: 0.478, blue: 0.980, alpha: 1.000)
        let appleGray = UIColor(red: 0.624, green: 0.624, blue: 0.624, alpha: 1.000)

        //// Variable Declarations
        let tabbarButtonColor = isSelected ? appleBlue : appleGray

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9, y: 30.66))
        bezierPath.addCurve(to: CGPoint(x: 11.46, y: 33), controlPoint1: CGPoint(x: 9, y: 31.95), controlPoint2: CGPoint(x: 10.1, y: 33))
        bezierPath.addLine(to: CGPoint(x: 29.54, y: 33))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 30.66), controlPoint1: CGPoint(x: 30.9, y: 33), controlPoint2: CGPoint(x: 32, y: 31.95))
        bezierPath.addLine(to: CGPoint(x: 32, y: 17.37))
        bezierPath.addLine(to: CGPoint(x: 9, y: 17.37))
        bezierPath.addLine(to: CGPoint(x: 9, y: 30.66))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25.43, y: 21.09))
        bezierPath.addCurve(to: CGPoint(x: 26.04, y: 20.5), controlPoint1: CGPoint(x: 25.43, y: 20.76), controlPoint2: CGPoint(x: 25.71, y: 20.5))
        bezierPath.addLine(to: CGPoint(x: 28.1, y: 20.5))
        bezierPath.addCurve(to: CGPoint(x: 28.71, y: 21.09), controlPoint1: CGPoint(x: 28.44, y: 20.5), controlPoint2: CGPoint(x: 28.71, y: 20.76))
        bezierPath.addLine(to: CGPoint(x: 28.71, y: 23.04))
        bezierPath.addCurve(to: CGPoint(x: 28.1, y: 23.62), controlPoint1: CGPoint(x: 28.71, y: 23.36), controlPoint2: CGPoint(x: 28.44, y: 23.62))
        bezierPath.addLine(to: CGPoint(x: 26.04, y: 23.62))
        bezierPath.addCurve(to: CGPoint(x: 25.43, y: 23.04), controlPoint1: CGPoint(x: 25.71, y: 23.62), controlPoint2: CGPoint(x: 25.43, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 25.43, y: 21.09))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25.43, y: 27.34))
        bezierPath.addCurve(to: CGPoint(x: 26.04, y: 26.75), controlPoint1: CGPoint(x: 25.43, y: 27.01), controlPoint2: CGPoint(x: 25.71, y: 26.75))
        bezierPath.addLine(to: CGPoint(x: 28.1, y: 26.75))
        bezierPath.addCurve(to: CGPoint(x: 28.71, y: 27.34), controlPoint1: CGPoint(x: 28.44, y: 26.75), controlPoint2: CGPoint(x: 28.71, y: 27.01))
        bezierPath.addLine(to: CGPoint(x: 28.71, y: 29.29))
        bezierPath.addCurve(to: CGPoint(x: 28.1, y: 29.87), controlPoint1: CGPoint(x: 28.71, y: 29.61), controlPoint2: CGPoint(x: 28.44, y: 29.87))
        bezierPath.addLine(to: CGPoint(x: 26.04, y: 29.87))
        bezierPath.addCurve(to: CGPoint(x: 25.43, y: 29.29), controlPoint1: CGPoint(x: 25.71, y: 29.87), controlPoint2: CGPoint(x: 25.43, y: 29.61))
        bezierPath.addLine(to: CGPoint(x: 25.43, y: 27.34))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 18.86, y: 21.09))
        bezierPath.addCurve(to: CGPoint(x: 19.47, y: 20.5), controlPoint1: CGPoint(x: 18.86, y: 20.76), controlPoint2: CGPoint(x: 19.13, y: 20.5))
        bezierPath.addLine(to: CGPoint(x: 21.53, y: 20.5))
        bezierPath.addCurve(to: CGPoint(x: 22.14, y: 21.09), controlPoint1: CGPoint(x: 21.87, y: 20.5), controlPoint2: CGPoint(x: 22.14, y: 20.76))
        bezierPath.addLine(to: CGPoint(x: 22.14, y: 23.04))
        bezierPath.addCurve(to: CGPoint(x: 21.53, y: 23.62), controlPoint1: CGPoint(x: 22.14, y: 23.36), controlPoint2: CGPoint(x: 21.87, y: 23.62))
        bezierPath.addLine(to: CGPoint(x: 19.47, y: 23.62))
        bezierPath.addCurve(to: CGPoint(x: 18.86, y: 23.04), controlPoint1: CGPoint(x: 19.13, y: 23.62), controlPoint2: CGPoint(x: 18.86, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 18.86, y: 21.09))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 18.86, y: 27.34))
        bezierPath.addCurve(to: CGPoint(x: 19.47, y: 26.75), controlPoint1: CGPoint(x: 18.86, y: 27.01), controlPoint2: CGPoint(x: 19.13, y: 26.75))
        bezierPath.addLine(to: CGPoint(x: 21.53, y: 26.75))
        bezierPath.addCurve(to: CGPoint(x: 22.14, y: 27.34), controlPoint1: CGPoint(x: 21.87, y: 26.75), controlPoint2: CGPoint(x: 22.14, y: 27.01))
        bezierPath.addLine(to: CGPoint(x: 22.14, y: 29.29))
        bezierPath.addCurve(to: CGPoint(x: 21.53, y: 29.87), controlPoint1: CGPoint(x: 22.14, y: 29.61), controlPoint2: CGPoint(x: 21.87, y: 29.87))
        bezierPath.addLine(to: CGPoint(x: 19.47, y: 29.87))
        bezierPath.addCurve(to: CGPoint(x: 18.86, y: 29.29), controlPoint1: CGPoint(x: 19.13, y: 29.87), controlPoint2: CGPoint(x: 18.86, y: 29.61))
        bezierPath.addLine(to: CGPoint(x: 18.86, y: 27.34))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12.29, y: 21.09))
        bezierPath.addCurve(to: CGPoint(x: 12.9, y: 20.5), controlPoint1: CGPoint(x: 12.29, y: 20.76), controlPoint2: CGPoint(x: 12.56, y: 20.5))
        bezierPath.addLine(to: CGPoint(x: 14.96, y: 20.5))
        bezierPath.addCurve(to: CGPoint(x: 15.57, y: 21.09), controlPoint1: CGPoint(x: 15.29, y: 20.5), controlPoint2: CGPoint(x: 15.57, y: 20.76))
        bezierPath.addLine(to: CGPoint(x: 15.57, y: 23.04))
        bezierPath.addCurve(to: CGPoint(x: 14.96, y: 23.62), controlPoint1: CGPoint(x: 15.57, y: 23.36), controlPoint2: CGPoint(x: 15.29, y: 23.62))
        bezierPath.addLine(to: CGPoint(x: 12.9, y: 23.62))
        bezierPath.addCurve(to: CGPoint(x: 12.29, y: 23.04), controlPoint1: CGPoint(x: 12.56, y: 23.62), controlPoint2: CGPoint(x: 12.29, y: 23.36))
        bezierPath.addLine(to: CGPoint(x: 12.29, y: 21.09))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12.29, y: 27.34))
        bezierPath.addCurve(to: CGPoint(x: 12.9, y: 26.75), controlPoint1: CGPoint(x: 12.29, y: 27.01), controlPoint2: CGPoint(x: 12.56, y: 26.75))
        bezierPath.addLine(to: CGPoint(x: 14.96, y: 26.75))
        bezierPath.addCurve(to: CGPoint(x: 15.57, y: 27.34), controlPoint1: CGPoint(x: 15.29, y: 26.75), controlPoint2: CGPoint(x: 15.57, y: 27.01))
        bezierPath.addLine(to: CGPoint(x: 15.57, y: 29.29))
        bezierPath.addCurve(to: CGPoint(x: 14.96, y: 29.87), controlPoint1: CGPoint(x: 15.57, y: 29.61), controlPoint2: CGPoint(x: 15.29, y: 29.87))
        bezierPath.addLine(to: CGPoint(x: 12.9, y: 29.87))
        bezierPath.addCurve(to: CGPoint(x: 12.29, y: 29.29), controlPoint1: CGPoint(x: 12.56, y: 29.87), controlPoint2: CGPoint(x: 12.29, y: 29.61))
        bezierPath.addLine(to: CGPoint(x: 12.29, y: 27.34))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 29.54, y: 11.12))
        bezierPath.addLine(to: CGPoint(x: 27.07, y: 11.12))
        bezierPath.addLine(to: CGPoint(x: 27.07, y: 8.78))
        bezierPath.addCurve(to: CGPoint(x: 26.25, y: 8), controlPoint1: CGPoint(x: 27.07, y: 8.35), controlPoint2: CGPoint(x: 26.7, y: 8))
        bezierPath.addLine(to: CGPoint(x: 24.61, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 23.79, y: 8.78), controlPoint1: CGPoint(x: 24.16, y: 8), controlPoint2: CGPoint(x: 23.79, y: 8.35))
        bezierPath.addLine(to: CGPoint(x: 23.79, y: 11.12))
        bezierPath.addLine(to: CGPoint(x: 17.21, y: 11.12))
        bezierPath.addLine(to: CGPoint(x: 17.21, y: 8.78))
        bezierPath.addCurve(to: CGPoint(x: 16.39, y: 8), controlPoint1: CGPoint(x: 17.21, y: 8.35), controlPoint2: CGPoint(x: 16.84, y: 8))
        bezierPath.addLine(to: CGPoint(x: 14.75, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 13.93, y: 8.78), controlPoint1: CGPoint(x: 14.3, y: 8), controlPoint2: CGPoint(x: 13.93, y: 8.35))
        bezierPath.addLine(to: CGPoint(x: 13.93, y: 11.12))
        bezierPath.addLine(to: CGPoint(x: 11.46, y: 11.12))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 13.47), controlPoint1: CGPoint(x: 10.1, y: 11.12), controlPoint2: CGPoint(x: 9, y: 12.17))
        bezierPath.addLine(to: CGPoint(x: 9, y: 15.81))
        bezierPath.addLine(to: CGPoint(x: 32, y: 15.81))
        bezierPath.addLine(to: CGPoint(x: 32, y: 13.47))
        bezierPath.addCurve(to: CGPoint(x: 29.54, y: 11.12), controlPoint1: CGPoint(x: 32, y: 12.17), controlPoint2: CGPoint(x: 30.9, y: 11.12))
        bezierPath.close()
        tabbarButtonColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawExploreTabIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit, isSelected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let appleBlue = UIColor(red: 0.000, green: 0.478, blue: 0.980, alpha: 1.000)
        let appleGray = UIColor(red: 0.624, green: 0.624, blue: 0.624, alpha: 1.000)

        //// Variable Declarations
        let tabbarButtonColor = isSelected ? appleBlue : appleGray

        //// Magnifying Glass Drawing
        let magnifyingGlassPath = UIBezierPath()
        magnifyingGlassPath.move(to: CGPoint(x: 31.67, y: 28.75))
        magnifyingGlassPath.addLine(to: CGPoint(x: 27, y: 24.08))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 26.2, y: 23.75), controlPoint1: CGPoint(x: 26.79, y: 23.87), controlPoint2: CGPoint(x: 26.5, y: 23.75))
        magnifyingGlassPath.addLine(to: CGPoint(x: 25.44, y: 23.75))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 27.5, y: 17.75), controlPoint1: CGPoint(x: 26.73, y: 22.09), controlPoint2: CGPoint(x: 27.5, y: 20.01))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 17.75, y: 8), controlPoint1: CGPoint(x: 27.5, y: 12.36), controlPoint2: CGPoint(x: 23.14, y: 8))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 8, y: 17.75), controlPoint1: CGPoint(x: 12.36, y: 8), controlPoint2: CGPoint(x: 8, y: 12.36))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 17.75, y: 27.5), controlPoint1: CGPoint(x: 8, y: 23.13), controlPoint2: CGPoint(x: 12.36, y: 27.5))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 23.75, y: 25.44), controlPoint1: CGPoint(x: 20.01, y: 27.5), controlPoint2: CGPoint(x: 22.1, y: 26.73))
        magnifyingGlassPath.addLine(to: CGPoint(x: 23.75, y: 26.2))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 24.08, y: 27), controlPoint1: CGPoint(x: 23.75, y: 26.5), controlPoint2: CGPoint(x: 23.87, y: 26.79))
        magnifyingGlassPath.addLine(to: CGPoint(x: 28.75, y: 31.67))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 30.34, y: 31.67), controlPoint1: CGPoint(x: 29.19, y: 32.11), controlPoint2: CGPoint(x: 29.91, y: 32.11))
        magnifyingGlassPath.addLine(to: CGPoint(x: 31.67, y: 30.34))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 31.67, y: 28.75), controlPoint1: CGPoint(x: 32.11, y: 29.9), controlPoint2: CGPoint(x: 32.11, y: 29.19))
        magnifyingGlassPath.close()
        magnifyingGlassPath.move(to: CGPoint(x: 17.75, y: 23.75))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 11.75, y: 17.75), controlPoint1: CGPoint(x: 14.44, y: 23.75), controlPoint2: CGPoint(x: 11.75, y: 21.07))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 17.75, y: 11.75), controlPoint1: CGPoint(x: 11.75, y: 14.44), controlPoint2: CGPoint(x: 14.43, y: 11.75))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 23.75, y: 17.75), controlPoint1: CGPoint(x: 21.07, y: 11.75), controlPoint2: CGPoint(x: 23.75, y: 14.43))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 17.75, y: 23.75), controlPoint1: CGPoint(x: 23.75, y: 21.06), controlPoint2: CGPoint(x: 21.07, y: 23.75))
        magnifyingGlassPath.close()
        tabbarButtonColor.setFill()
        magnifyingGlassPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfUserTabIcon(isSelected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            DrawCode.drawUserTabIcon(isSelected: isSelected)

        let imageOfUserTabIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfUserTabIcon
    }

    @objc dynamic public class func imageOfCalendarTabIcon(isSelected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            DrawCode.drawCalendarTabIcon(isSelected: isSelected)

        let imageOfCalendarTabIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCalendarTabIcon
    }

    @objc dynamic public class func imageOfExploreTabIcon(isSelected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            DrawCode.drawExploreTabIcon(isSelected: isSelected)

        let imageOfExploreTabIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfExploreTabIcon
    }




    @objc(DrawCodeResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
